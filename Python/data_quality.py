# -*- coding: utf-8 -*-
"""
Created on Fri Aug 28 09:00:32 2020

@author: andy
"""

# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from bs4 import BeautifulSoup
import pandas as pd
import os
import glob
import shutil
import pandas as pd
from pathlib import Path
import re 
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

from os import path
from docx import Document



# =============================================================================
# Global varaibles
# =============================================================================


# =============================================================================
# Functions
# =============================================================================
def get_file_path(directory_name,filename):    
    director_path=Path(directory_name)
    full_file_path=director_path / filename
    return full_file_path
    

    
# # =============================================================================
# # Import Data  
# # =============================================================================


data_orginal_file=get_file_path(r"C:\Users\Andy.JIVEDIVE\OneDrive - University of Buckingham\Assignments\Final Project\Python","apprentices_export 11-09-2020.xlsx")

dataset=pd.read_excel(data_orginal_file, sheet_name="apprentices_export (1)")
data_group=dataset.groupby("Standard").count()
plt.bar(data_group.index,data_group['Apprentice ULN'])
# data_group=data_EPA_bookings.groupby("Grading Received from IA").count()
# fig = plt.figure(figsize=(12,10), dpi=800)
# plt.title('Count of P/M/D',fontsize=18) 
# plt.xlabel("Grade",fontsize=16)
# plt.ylabel("Count",fontsize=16)
# plt.xticks(rotation=90)
# plt.bar(data_group.index,data_group['ULN'])
# fig.savefig("fig2.png")
# plt.show()

#Count number of each status
dataset.groupby('Status').sum()

#Check for duplicate rows
datatset_dups_test=dataset.duplicated()
dataset_dups=datatset_dups_test[datatset_dups_test == True]
if (len(dataset_dups) > 0):
    print("%s duplicate Rows" % len(dataset_dups))
else:
    print("No duplicate rows")

#Check for duplicate Unique Learner Number ULN
datatset_dups_test=dataset['Apprentice ULN'].duplicated()
dataset_dups=datatset_dups_test[datatset_dups_test == True]
if (len(dataset_dups) > 0):
    print("%s Apprentices with the same ULN" % len(dataset_dups))
    duplicate_list=dataset[datatset_dups_test == True]
    print(duplicate_list[['ACE360 ID','Apprentice ULN']])
else:
    print("No Apprentice ULN")
    
#Check for duplicate Unique Learner Number ACE360 ID
datatset_dups_test=dataset['ACE360 ID'].duplicated()
dataset_dups=datatset_dups_test[datatset_dups_test == True]
if (len(dataset_dups) > 0):
    print("%s Apprentices with the same ACE360 ID" % len(dataset_dups))
    duplicate_list=dataset[datatset_dups_test == True]
    print(duplicate_list[['ACE360 ID','Apprentice ULN']])
else:
    print("No Apprentice with same ACE360 ID")

